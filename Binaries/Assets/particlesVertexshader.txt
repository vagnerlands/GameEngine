#version 330 core
layout (location = 0) in vec3 aPos;
uniform float time_0_X;
//uniform mat4  view_inverse_matrix;
uniform float particleSystemHeight;
uniform float particleSpeed;
uniform float particleSpread;
uniform float particleSystemShape;
uniform float particleShape;
uniform float particleSize;
uniform vec3 cameraUp;
uniform vec3 cameraRight;
uniform vec4  particleSystemPosition;
uniform mat4 projection;
uniform mat4 view;

// The model for the particle system consists of a hundred quads.
// These quads are simple (-1,-1) to (1,1) quads where each quad
// has a z ranging from 0 to 1. The z will be used to differenciate
// between different particles


varying vec2  vTexCoord;
varying float vColor;

void main(void)
{
  
   // Loop particles
   //float t = fract(aPos.z + particleSpeed * time_0_X);
  
	vec3 vertexPosition_worldspace =
    particleSystemPosition.xyz
    + cameraRight * aPos.x * particleSize
    + cameraUp * aPos.y * particleSize;
	
	gl_Position = projection * view * vec4(vertexPosition_worldspace,1);
   
    vTexCoord = vec2((particleSystemPosition.x + aPos.x * particleSize)+0.5, (particleSystemPosition.y + aPos.y * particleSize));
    vColor    = 1.0 ;//- t;
   
}