#version 140

attribute vec4 vPosition; 
uniform vec3 translate;
uniform vec3 scale;
uniform vec4 rotation;
varying vec3 pos;

varying vec3 N;
varying vec3 v;

void main()
{
    pos = vec3(gl_Vertex);
	
	v = vec3(gl_ModelViewMatrix * gl_Vertex);       
        N = normalize(gl_NormalMatrix * gl_Normal);
	
	float angle = radians(rotation[0]);
	vec3 axis = normalize(rotation.yzw);
	
	mat3 I = mat3(1.0);
	mat3 S = mat3(      0, -axis.z,  axis.y,
	               axis.z,       0, -axis.x,
                  -axis.y,  axis.x,       0);
	mat3 uuT = outerProduct(axis, axis);
	mat3 rot = uuT + cos(angle)*(I - uuT) + sin(angle)*S;	

	pos *= scale;	
	pos *= rot;
    pos += translate;

	gl_Position =  gl_ModelViewProjectionMatrix * vec4(pos, 1);
}