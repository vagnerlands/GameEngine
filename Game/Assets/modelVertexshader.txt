#version 330 core

layout (location = 0) in vec3 aPos;
layout (location = 1) in vec3 aNormal;
layout (location = 2) in vec2 aTexCoords;
layout (location = 3) in vec3 aTangent;
layout (location = 4) in vec3 aBitangent;

uniform vec3 translate;
uniform vec3 scale;
uniform vec4 rotation;

uniform mat4 projection;
uniform mat4 view;
uniform mat4 model;

varying vec3 N;
varying vec3 pos;
varying vec2 TexCoords;

void main()
{
    pos = vec3(aPos);

    TexCoords = aTexCoords;
    
    mat3 normalMatrix = transpose(inverse(mat3(model)));
    vec3 N = normalize(normalMatrix * aNormal);
	
	float angle = radians(rotation[0]);
	vec3 axis = normalize(rotation.yzw);
	
	mat3 I = mat3(1.0);
	mat3 S = mat3(      0, -axis.z,  axis.y,
	               axis.z,       0, -axis.x,
                  -axis.y,  axis.x,       0);
	mat3 uuT = outerProduct(axis, axis);
	mat3 rot = uuT + cos(angle)*(I - uuT) + sin(angle)*S;	

	pos *= scale;	
	pos *= rot;
    pos += translate;
	
	gl_Position =  projection * view * vec4(pos, 1);
}
