#version 330 core
layout (location = 0) in vec3 aPos;
layout (location = 1) in vec3 aNormal;
layout (location = 2) in vec2 aTexCoords;
layout (location = 3) in vec3 aTangent;
layout (location = 4) in vec3 aBitangent;

out VS_OUT {
    vec3 FragPos;
    vec2 TexCoords;
    vec3 TangentLightPos;
    vec3 TangentViewPos;
    vec3 TangentFragPos;
} vs_out;

uniform mat4 projection;
uniform mat4 view;
uniform mat4 model;

uniform vec3 lightPos;
uniform vec3 viewPos;

void main()
{
    vs_out.FragPos = vec3(model * vec4(aPos, 1.0));   
    vs_out.TexCoords = aTexCoords;
    
    mat3 normalMatrix = transpose(inverse(mat3(model)));
    vec3 T = normalize(normalMatrix * aTangent);
    vec3 N = normalize(normalMatrix * aNormal);
    T = normalize(T - dot(T, N) * N);
    vec3 B = cross(N, T);
    
    mat3 TBN = transpose(mat3(T, B, N));    
    vs_out.TangentLightPos = TBN * lightPos;
    vs_out.TangentViewPos  = TBN * viewPos;
    vs_out.TangentFragPos  = TBN * vs_out.FragPos;
        
    gl_Position = projection * view * model * vec4(aPos, 1.0);
}
/*
attribute vec4 vPosition; 
uniform vec3 translate;
uniform vec3 scale;
uniform vec4 rotation;
varying vec3 pos;

varying vec3 N;
varying vec3 v;

void main()
{
    pos = vec3(gl_Vertex);
	
    N = normalize(gl_NormalMatrix * gl_Normal);
	
	float angle = radians(rotation[0]);
	vec3 axis = normalize(rotation.yzw);
	
	mat3 I = mat3(1.0);
	mat3 S = mat3(      0, -axis.z,  axis.y,
	               axis.z,       0, -axis.x,
                  -axis.y,  axis.x,       0);
	mat3 uuT = outerProduct(axis, axis);
	mat3 rot = uuT + cos(angle)*(I - uuT) + sin(angle)*S;	

	pos *= scale;	
	pos *= rot;
    pos += translate;
	
	v = vec3(gl_ModelViewMatrix * vec4(pos,1.0));       
	
	gl_TexCoord[0] = gl_MultiTexCoord0; 


	gl_Position =  gl_ModelViewProjectionMatrix * vec4(pos, 1);
}
*/